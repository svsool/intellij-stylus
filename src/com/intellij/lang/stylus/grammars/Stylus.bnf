{
  parserClass="com.intellij.lang.stylus.parser.StylusParser"
  stubParserClass="com.intellij.lang.stylus.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Stylus"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.lang.stylus.psi"
  psiImplPackage="com.intellij.lang.stylus.psi.impl"

  elementTypeHolderClass="com.intellij.lang.stylus.StylusTypes"
  elementTypePrefix="STYL_"
  elementTypeClass="com.intellij.lang.stylus.psi.StylusElementType"
  tokenTypeClass="com.intellij.lang.stylus.psi.StylusTokenType"

  // operators
    OP_PLUS         = "+"
    OP_MINUS        = "-"
    OP_AR_MUL       = "*"
    OP_AR_DIV       = "/"
    OP_EQ_EQ        = "=="
    OP_DIV_EQ       = "/="
    OP_EQ_COL_EQ    = "=:="
    OP_EQ_DIV_EQ    = "=/="
    OP_LT           = "<"
    OP_EQ_LT        = "=<"
    OP_GT           = ">"
    OP_GT_EQ        = ">="
    OP_LT_EQ        = "<="
    OP_PLUS_PLUS    = "++"
    OP_MINUS_MINUS  = "--"
    OP_EQ           = "="
    OP_EXL          = "!"
    OP_LT_MINUS     = "<-"

    BIN_START       = "<<"
    BIN_END         = ">>"

    PAR_LEFT        = "("
    PAR_RIGHT       = ")"
    CURLY_LEFT      = "{"
    CURLY_RIGHT     = "}"
    BRACKET_LEFT    = "["
    BRACKET_RIGHT   = "]"
    DOT             = "."
    DOT_DOT         = ".."
    DOT_DOT_DOT     = "..."
    COLON           = ":"
    COLON_COLON     = "::"
    OR_OR           = "||"
    OP_OR           = "|"
    SEMI            = ";"
    COMMA           = ","
    ARROW           = "->"
    RADIX           = "#"
    QMARK           = "?"
    UNI_PATTERN     = "_"
    DOLLAR          = "$"
    AMP             = "&"
    HAT             = "^"
}

stylus_file ::= stylus_entries*

private stylus_entries ::= !<<eof>> stylus_entry*

private stylus_entry ::=
  statement
  | '{' | '}' | '(' | ')' | '[' | ']' | ':' | '.' | ';' | ','  | '$' | '#' | '>' | '&' | '+' | '-' | '*' | '/' | '=' | '!' | '^'

private statement ::=
 selector
 | property

selector ::= selector_

private selector_ ::=
  selector_id
  | selector_class
  | selector_pseudo
  | selector_tag

selector_id ::= '#'selector_string
selector_class ::= '.'selector_string
selector_pseudo ::= (selector_id | selector_class | selector_tag)'['selector_string "^"? "=" "\"" selector_string "\"" "]"
selector_tag ::= selector_string

property ::= indent property_parts outdent
private property_parts ::= property_name property_value
property_name ::= ident ':'?
property_value ::= ((number unit) | color | number | unit | ',' | ident | '$' | '-' | "\"" | "\\")* ';'?